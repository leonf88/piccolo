#! /usr/bin/env python
# encoding: utf-8

import sys
sys.path.append('../waftools')

import os
import ppp_tool
import proto_tool
import swig
from os.path import join
from waflib import Utils
from waflib.Tools.ccroot import link_task

top = '.'
out = os.path.abspath('../build')

PROTO_FILES = [
  'util/common.proto',
  'worker/worker.proto',
  'examples/examples.proto',
  ]

STANDARD_LIBS = [ 'PROTOBUF', 'BOOST_THREAD', 'UNWIND', 'RT' ]

class piccolo_program(link_task):
  run_str = ' '.join(['${LINK_CXX}',
                      '${LINKFLAGS}',
                      '${CXXLNK_SRC_F}${SRC}',
                      '${CXXLNK_TGT_F}${TGT[0].abspath()}',
                      '${RPATH_ST:RPATH}',
                      '${FRAMEWORKPATH_ST:FRAMEWORKPATH}',
                      '${FRAMEWORK_ST:FRAMEWORK}',
                      '${ARCH_ST:ARCH}',
                      '-Wl,--start-group',
                      '${STLIB_MARKER}',
                      '${STLIBPATH_ST:STLIBPATH}',
                      '${STLIB_ST:PICCOLO_STATIC}',
                      '${SHLIB_MARKER}',
                      '${LIBPATH_ST:LIBPATH}',
                      '${LIB_ST:LIB}',
                      '-Wl,--end-group',
                      ])

  vars = ['LINKDEPS']
  ext_out = ['.bin']
  inst_to = '${BINDIR}'
  chmod = Utils.O755

def options(ctx):
  ctx.load('compiler_cc')
  ctx.load('compiler_cxx')
  ctx.load('python')

def configure(ctx):
  ctx.check_tool('compiler_cc')
  ctx.check_tool('compiler_cxx')
  ctx.check_tool('python')
  ctx.check_python_headers()

  proto_tool.configure(ctx)
  swig.configure(ctx)
  ppp_tool.configure(ctx)

  distcc = ctx.find_program('distcc', var='DISTCC', mandatory=False)

  if distcc and ctx.env['DISTCC_HOSTS']:
    ctx.env['CC'] = ['distcc'] + ctx.env['CC']
    ctx.env['CXX'] = ['distcc'] + ctx.env['CXX']


  ctx.check(header_name='libunwind.h')

  ctx.find_program('protoc')
  ctx.find_program('mpic++')

  ctx.env['CXX'] = 'mpic++'

  ctx.check(lib='boost_thread')
  ctx.check(lib='protobuf')
  ctx.check(lib='rt')
  ctx.check(lib='unwind')

  def check_optional(*args, **kw):
    try:
      ctx.check(*args, **kw)
      return True
    except ctx.errors.ConfigurationError:
      return False

  profiler_h = check_optional(header_name='google/profiler.h')
  profiler_lib = check_optional(lib='profiler')

  if profiler_h and profiler_lib:
    STANDARD_LIBS.append('PROFILER')
    ctx.define('HAVE_CPU_PROFILER', 1)
    ctx.env.HAVE_CPU_PROFILER = 1
  else:
    ctx.msg('Google profiler library was not found; profiling will not be available.', False)

  tcmalloc_lib = check_optional(lib='tcmalloc')
  if tcmalloc_lib:
    ctx.define('HAVE_HEAP_PROFILER', 1)
    ctx.define('HAVE_TCMALLOC', 1)
    ctx.env.HAVE_TCMALLOC = 1
  else:
    ctx.msg('TCMalloc not found -- heap profiling will not be available.', False)
    ctx.env.HAVE_TCMALLOC = 0

  if not check_optional(lib='blas'):
    ctx.msg('BLAS library was not found; certain examples will not be built', False)

  if not check_optional(lib='z'):
    ctx.msg('Zlib library was not found; certain examples will not be built', False)

  lzo_h = check_optional(header_name='lzo/lzo1x.h')
  lzo1_lib = check_optional(lib='lzo', uselib_store='LZO')
  lzo2_lib = check_optional(lib='lzo2', uselib_store='LZO')

  if lzo_h and (lzo1_lib or lzo2_lib):
    ctx.define('HAVE_LZO', 1)

  # link all programs with the required MPI libraries
  ctx.env.append_unique('LIB', os.popen('mpic++ -showme:libs').read().split())


  COMPILER_FLAGS = ['-fPIC',
                    '-Wall',
                    '-Wno-sign-compare',
                    '-Wno-unused-function',
                    '-Wno-unused-result',
                    '-O3',
                    '-ggdb2']

  ctx.env.append_unique('CXXFLAGS', COMPILER_FLAGS)
  ctx.env.append_unique('CFLAGS', COMPILER_FLAGS)

  ctx.env.append_unique('INCLUDES',
                       [ctx.path.find_dir(top).abspath(),
                        out,
                        ctx.path.find_or_declare('src').get_bld().abspath(),
                        ctx.path.find_dir('external/google-logging').abspath(),
                        ctx.path.find_dir('external/google-flags').abspath()])

  ctx.env.append_unique('SWIGFLAGS',
      ['-python', '-ignoremissing', '-c++', '-w315', 
       '-I%s' % ctx.path.find_dir(top).abspath()])

  ctx.write_config_header('../src/piccolo-config.h',remove=False)

def build(bld):

  bld.env['SRCDIR'] = bld.path.get_src().abspath()

  bld.shlib(target='piccolo_proto', source=PROTO_FILES, features='cxx cxxshlib')
  bld.add_group()

  def _lib(target, source, dir, use=None, features=''):
    if not use: use = []
    source = [join(dir, src) for src in source]
    bld.shlib(target=target,
              use=use,
              source=source,
              features=features)

  _lib(target='common',
       dir='util',
       source=['common.cc',
               'file.cc',
               'stringpiece.cc',
               'rpc.cc',
               'static-initializers.cc'])

  _lib(target='kernel',
       dir='kernel',
       source=[ 'kernel.cc',
                'table-registry.cc',
                'disk-table.cc',
                'local-table.cc',
                'global-table.cc',
                 ])

  _lib(target='worker',
       dir='worker',
       use=[ 'kernel', 'common' ],
       source=[ 'worker.cc' ])

  if bld.env.HAVE_SWIG:
    _lib(target='_piccolo.so',
         dir='client/python',
         source=['python_support.swig'],
         features='pyext cxx',
         use=['worker', 'common', 'kernel', 'master', 'gflags', 'glog'])

  _lib(target='master',
       dir='master',
       use=['kernel', 'common'],
       source=['master.cc'])

  _lib(target='gflags',
       dir='external/google-flags',
       source=['gflags.cc',
               'gflags_reporting.cc',
               'gflags_nc.cc'])

  _lib(target='glog',
       dir='external/google-logging',
       source=[ 'utilities.cc',
                'vlog_is_on.cc',
                'demangle.cc',
                'logging.cc',
                'symbolize.cc',
                'signalhandler.cc',
                'raw_logging.cc' ])

  main_obj = bld.objects(target='example_main.o',
                         source=['examples/main.cc'])

  def build_example(target, sources, use=None):
    if not use: use = []

    # add system library dependencies
    piccolo_lib = [ 'piccolo_proto',
                    'worker', 'master', 'common', 'kernel',
                    'gflags', 'glog', ]

    if bld.env.HAVE_TCMALLOC:
      STANDARD_LIBS.append('tcmalloc')
      piccolo_lib.append('tcmalloc')
      use.append('tcmalloc')

    if bld.env.HAVE_CPU_PROFILER:
      STANDARD_LIBS.append('PROFILER')
      piccolo_lib.append('profiler')
      use.append('profiler')

    if bld.env.HAVE_LZO:
      STANDARD_LIBS.append('LZO')
      use.append('lzo')

    #print " ".join(use + ['example_main.o',] + piccolo_lib + STANDARD_LIBS)
    bld.program(target=target,
                source=[join('examples', src) for src in sources],
                features='cxxprogram cxx',
                use=use + ['example_main.o', ] + piccolo_lib + STANDARD_LIBS,
                lib=piccolo_lib)

  if 'LIB_BLAS' in bld.env:
    build_example('matmul', ['matmul.pp', ], use=['BLAS'])

  if 'LIB_Z' in bld.env:
    _lib(target='webgraph',
         dir='external/webgraph',
         source=['webgraph.cc'],
         use=['Z', 'tcmalloc'])

    build_example('pagerank', ['pagerank.pp'], use=['webgraph'])
    build_example('accelpagerank', ['accelpagerank.pp'], use=['webgraph'])

  build_example('k-means', ['k-means.pp', ])
  build_example('shortest-path', ['shortest-path.pp', ])
  build_example('shortest-path-trigger', ['shortest-path-trigger.pp', ])

  build_example('test-tables', ['test-tables.cc', ])
  build_example('test-tables2', ['test-tables2.cc', ])
  build_example('wordcount', ['wordcount.pp', ])
  build_example('faceclass', ['imglib/pgmimage.cpp',
                               'facedet/cpp/imagenet.cpp',
                               'facedet/cpp/backprop.cpp',
                               'faceclass.cc', ])
  build_example('nas/isort', ['nas/isort.cc', ])
  build_example('nas/n-body', ['nas/n-body.cc', ])
  build_example('bipartmatch', ['bipartmatch.cc'])
  build_example('bipartmatch-trigger', ['bipartmatch-trigger.cc', ])
  build_example('conncomp', ['conncomp.pp', ])
  build_example('conncomp-trigger', ['conncomp-trigger.pp', ])
  build_example('image-denoise-trigger', ['image-denoise-trigger.pp', 'imglib/pgmimage.cpp', ])

